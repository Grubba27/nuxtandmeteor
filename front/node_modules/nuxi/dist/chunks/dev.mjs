import { s as setupDotenv } from '../shared/nuxi.a15e6e73.mjs';
import { s as showVersions } from '../shared/nuxi.aa87612b.mjs';
import { l as loadKit } from '../shared/nuxi.f65c0f6b.mjs';
import { i as importModule } from '../shared/nuxi.31a0124f.mjs';
import { o as overrideEnv } from '../shared/nuxi.2509f57e.mjs';
import { d as defineCommand } from '../shared/nuxi.57fa43de.mjs';
import './index2.mjs';
import 'node:http';
import 'node:https';
import 'node:util';
import 'node:net';
import 'node:os';
import 'node:path';
import 'node:process';
import 'node:tty';
import { fork } from 'node:child_process';
import 'node:fs';
import 'node:fs/promises';
import { s as sharedArgs, l as legacyRootDirArgs } from '../shared/nuxi.01862219.mjs';
import { r as resolve } from '../shared/nuxi.dcd5f40f.mjs';
import 'fs';
import 'path';
import 'os';
import 'crypto';
import '../shared/nuxi.357b3b4e.mjs';
import 'module';
import 'perf_hooks';
import 'vm';
import 'url';
import 'assert';
import 'process';
import 'v8';
import 'util';
import 'tty';
import '../shared/nuxi.46857576.mjs';
import 'events';
import 'stream';
import '../shared/nuxi.d1302898.mjs';
import '../shared/nuxi.cb18516a.mjs';
import 'node:module';
import 'node:url';
import '../shared/nuxi.615ae2d1.mjs';
import '../shared/nuxi.2ec68044.mjs';
import 'node:assert';
import 'node:v8';
import 'http';
import 'https';
import '../shared/nuxi.a685c563.mjs';

function getArgs() {
  return {
    port: {
      type: "string",
      description: "Port to listen on (use `PORT` environment variable to override)"
    },
    host: {
      description: "Host to listen on. If no value or an empty string provided, will listen on all available interfaces (use `HOST` environment variable to override)"
    },
    clipboard: {
      type: "boolean",
      description: "Copy the URL to the clipboard",
      default: false
    },
    open: {
      type: "boolean",
      description: "Open the URL in the browser",
      default: false
    },
    https: {
      type: "boolean",
      description: "Enable HTTPS",
      default: false
    },
    "https.cert": {
      type: "string",
      description: "Path to TLS certificate used with HTTPS in PEM format"
    },
    "https.key": {
      type: "string",
      description: "Path to TLS key used with HTTPS in PEM format"
    },
    "https.pfx": {
      type: "string",
      description: "Path to PKCS#12 (.p12/.pfx) keystore containing a TLS certificate and Key"
    },
    "https.passphrase": {
      type: "string",
      description: "Passphrase used for TLS key or keystore"
    },
    "https.validityDays": {
      type: "string",
      description: "Validity in days of the autogenerated TLS certificate (https: true)"
    },
    "https.domains": {
      type: "string",
      description: "Comma seperated list of domains and IPs, the autogenerated certificate should be valid for (https: true)"
    },
    publicURL: {
      type: "string",
      description: "Displayed public URL (used for QR code)",
      required: false
    },
    qr: {
      type: "boolean",
      description: "Display The QR code of public URL when available",
      required: false
    },
    public: {
      type: "boolean",
      description: "Listen to all network interfaces",
      required: false
    },
    tunnel: {
      type: "boolean",
      description: "Open a tunnel using https://github.com/unjs/untun",
      required: false
    }
  };
}
function parseArgs(args) {
  return {
    port: args.port,
    // prettier-ignore
    hostname: typeof args.host === "string" ? args.host : args.host === true ? "" : void 0,
    clipboard: args.clipboard,
    open: args.open,
    qr: args.qr,
    publicURL: args.publicURL,
    public: args.public,
    tunnel: args.tunnel,
    https: args.https ? {
      cert: args["https.cert"],
      key: args["https.key"],
      pfx: args["https.pfx"],
      passphrase: args["https.passphrase"],
      validityDays: args["https.validityDays"] ? +args["https.validityDays"] : void 0,
      domains: args["https.domains"] ? args["https.domains"].split(",") : void 0
    } : false
  };
}

const command = defineCommand({
  meta: {
    name: "dev",
    description: "Run nuxt development server"
  },
  args: {
    ...sharedArgs,
    ...legacyRootDirArgs,
    ...getArgs(),
    dotenv: {
      type: "string",
      description: "Path to .env file"
    },
    clear: {
      type: "boolean",
      description: "Clear console on restart"
    }
  },
  async run(ctx) {
    overrideEnv("development");
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir || ".");
    showVersions(cwd);
    await setupDotenv({ cwd, fileName: ctx.args.dotenv });
    const { loadNuxtConfig } = await loadKit(cwd);
    const nuxtOptions = await loadNuxtConfig({
      cwd,
      overrides: {
        dev: true,
        logLevel: ctx.args.logLevel,
        ...ctx.data?.overrides
      }
    });
    const devServer = await _createDevServer(nuxtOptions);
    const { listen } = await import('./index2.mjs');
    const listener = await listen(
      devServer.handler,
      _resolveListenOptions(nuxtOptions, ctx.args)
    );
    listener.server.on("upgrade", devServer.wsHandler);
    await listener.showURL();
    _startSubprocess(devServer, listener);
  }
});
async function _createDevServer(nuxtOptions) {
  let loadingMessage = "Nuxt dev server is starting...";
  const loadingTemplate = nuxtOptions.devServer.loadingTemplate ?? await importModule("@nuxt/ui-templates", nuxtOptions.modulesDir).then(
    (r) => r.loading
  );
  const { createProxyServer } = await import('./index8.mjs');
  const proxy = createProxyServer({});
  let address;
  const handler = (req, res) => {
    if (!address) {
      res.statusCode = 503;
      res.setHeader("Content-Type", "text/html");
      res.end(loadingTemplate({ loading: loadingMessage }));
      return;
    }
    return proxy.web(req, res, { target: address });
  };
  const wsHandler = (req, socket, head) => {
    if (!address) {
      socket.destroy();
      return;
    }
    return proxy.ws(req, socket, { target: address }, head);
  };
  return {
    handler,
    wsHandler,
    setAddress: (_addr) => {
      address = _addr;
    },
    setLoadingMessage: (_msg) => {
      loadingMessage = _msg;
    }
  };
}
function _startSubprocess(devServer, listener) {
  let childProc;
  const close = () => {
    childProc?.kill();
    childProc = void 0;
  };
  const restart = () => {
    close();
    _startSubprocess(devServer, listener);
  };
  for (const signal of [
    "exit",
    "SIGTERM",
    "SIGINT",
    "SIGQUIT"
  ]) {
    process.once(signal, close);
  }
  childProc = fork(
    globalThis.__nuxt_cli__?.entry,
    ["_dev", ...process.argv.splice(3)],
    {
      execArgv: [
        "--enable-source-maps",
        process.argv.includes("--inspect") && "--inspect"
      ].filter(Boolean),
      env: {
        ...process.env,
        __NUXT_DEV_LISTENER__: JSON.stringify({
          url: listener.url,
          urls: listener.getURLs(),
          https: listener.https
        })
      }
    }
  );
  childProc.on("close", (code) => {
    if (code) {
      process.exit(code);
    } else {
      process.exit();
    }
  });
  childProc.on("message", (message) => {
    if (message.type === "nuxt:internal:dev:ready") {
      devServer.setAddress(`http://127.0.0.1:${message.port}`);
    } else if (message.type === "nuxt:internal:dev:loading") {
      devServer.setAddress(void 0);
      devServer.setLoadingMessage(message.message);
    }
    if (message?.type === "nuxt:restart") ;
  });
  return {
    childProc,
    close,
    restart
  };
}
function _resolveListenOptions(nuxtOptions, args) {
  const _devServerConfig = (nuxtOptions._layers?.[0].config || nuxtOptions)?.devServer || {};
  const _port = args.port ?? args.p ?? process.env.NUXT_PORT ?? process.env.NITRO_PORT ?? process.env.PORT ?? _devServerConfig.port;
  const _hostname = typeof args.host === "string" ? args.host : (args.host === true ? "" : void 0) ?? process.env.NUXT_HOST ?? process.env.NITRO_HOST ?? process.env.HOST ?? _devServerConfig.host;
  const _public = args.public ?? (_hostname && !["localhost", "127.0.0.1", "::1"].includes(_hostname)) ? true : void 0;
  const _httpsCert = args["https.cert"] || args.sslCert || process.env.NUXT_SSL_CERT || process.env.NITRO_SSL_CERT || typeof _devServerConfig.https !== "boolean" && _devServerConfig.https?.cert || "";
  const _httpsKey = args["https.key"] || args.sslKey || process.env.NUXT_SSL_KEY || process.env.NITRO_SSL_KEY || typeof _devServerConfig.https !== "boolean" && _devServerConfig.https?.key || "";
  return {
    ...parseArgs({
      ...args,
      open: args.o || args.open,
      "https.cert": _httpsCert,
      "https.key": _httpsKey
    }),
    port: _port,
    hostname: _hostname,
    public: _public,
    showURL: false
  };
}

export { command as default };
